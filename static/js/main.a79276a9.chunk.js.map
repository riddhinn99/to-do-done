{"version":3,"sources":["CurrentNote/CurrentNote.jsx","NoteInput/NoteInput.jsx","Config/config.js","App.js","serviceWorker.js","index.js"],"names":["CurrentNote","props","noteContent","nodeId","deleteNote","bind","noteId","console","log","this","className","value","onClick","Component","NoteInput","state","newNoteContent","textChange","writeNote","e","setState","target","addNote","type","placeholder","onChange","Firebase","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","db","database","ref","child","notes","prev_notes","on","snap","push","key","val","i","length","splice","note","set","toBeDeleted","remove","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a79276a9.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './CurrentNote.css';\n\nclass CurrentNote extends Component{\n\n    constructor(props){\n        super(props);\n        this.noteContent = props.noteContent;\n        this.nodeId = props.nodeId;\n        this.deleteNote = this.deleteNote.bind(this);\n    }\n\n    deleteNote(noteId){\n        console.log(\"note id is\", noteId);\n        this.props.deleteNote(noteId);\n    }\n\n    render(){\n        return(\n            <div className=\"noteElement\">\n                <p>{this.noteContent}\n                <span className=\"cross\" value={this.noteContent} onClick ={() => this.deleteNote(this.noteContent)}>X</span>\n                </p>\n            </div>\n            \n        );\n    }\n}\n\nexport default CurrentNote;","import React, {Component} from 'react';\nimport './NoteInput.css';\n\nclass NoteInput extends Component{\n    constructor(props){\n        super(props);\n        this.state = { newNoteContent : ''};\n        this.textChange = this.textChange.bind(this);\n        this.writeNote = this.writeNote.bind(this)\n    }\n\n    textChange(e){\n        this.setState({\n            newNoteContent : e.target.value\n        })\n    }\n\n    writeNote(e){\n        this.props.addNote(this.state.newNoteContent);\n        this.setState({\n            newNoteContent : ''\n        })\n    }\n\n    render(props){\n        return(\n            <div className=\"inputForm\">\n                <input type=\"text\" placeholder = \"Enter New Note\" \n                value={this.state.newNoteContent}\n                onChange={this.textChange}></input>\n                <button onClick={this.writeNote}>ADD</button>\n            </div>\n        );\n    }\n}\n\nexport default NoteInput;","import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBhk3B3LPjLMy2Cl9q3vjiUryiN5KTJVa8\",\n    authDomain: \"to-do-done-2a09d.firebaseapp.com\",\n    databaseURL: \"https://to-do-done-2a09d.firebaseio.com\",\n    projectId: \"to-do-done-2a09d\",\n    storageBucket: \"to-do-done-2a09d.appspot.com\",\n    messagingSenderId: \"1006061032027\",\n    appId: \"1:1006061032027:web:3f94f77b55f7848c65a57e\"\n  };\n\n  const Firebase = firebase.initializeApp(firebaseConfig);\n  export default Firebase;","import React, {Component} from 'react';\nimport './App.css';\nimport CurrentNote from './CurrentNote/CurrentNote';\nimport NoteInput from './NoteInput/NoteInput';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport Firebase from './Config/config';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.db = Firebase.database().ref().child('notes');\n    this.addNote = this.addNote.bind(this);\n    this.deleteNote = this.deleteNote.bind(this);\n\n    this.state = {\n      notes : []}\n  }\n\n    componentDidMount(){\n    console.log(\"before: \", this.state.notes);\n    const prev_notes = this.state.notes;\n    console.log(\"after: \", prev_notes);\n    this.db.on('child_added', snap => {\n      prev_notes.push({\n        noteId : snap.key,\n        noteContent : snap.val().noteContent\n      })\n    });\n    console.log(\"later: \", prev_notes);\n    this.setState({\n      notes : prev_notes\n    });\n    console.log(\"last: \", this.state.notes);\n\n    this.db.on('child_removed', snap => {\n      for(var i = 0; i < prev_notes.length; i++){\n        //console.log(\"array is\", prev_notes[i]);\n        if(prev_notes[i].noteId === snap.key){\n          //console.log(\"note in matching if is\", snap.noteContent);\n          prev_notes.splice(i, 1);\n        }\n      }\n    });\n    this.setState({\n      notes : prev_notes\n    });\n  }\n\n\n\n  addNote(note){\n    console.log(\"note is\", note);\n    this.db.push().set({noteContent : note});\n    this.setState(this.state);\n  }\n\n  deleteNote(noteId){\n    console.log(\"note id in deletenote is\", noteId);\n    let toBeDeleted = noteId;\n    for(var i = 0; i < this.state.notes.length; i++){\n      //console.log(\"array is\", this.state.notes[i]);\n      if(this.state.notes[i].noteContent === noteId){\n        toBeDeleted = this.state.notes[i].noteId;\n      }\n    }\n    this.db.child(toBeDeleted).remove();\n    this.setState(this.state);\n  }\n\n  render(){\n    return (\n      <div className = \"current\">\n        <div><NoteInput addNote = {this.addNote}></NoteInput></div>\n        <div>\n        {\n        this.state.notes.map((note) => {\n          return (\n            <CurrentNote deleteNote={this.deleteNote} noteContent={note.noteContent} noteId={note.noteId} key = {note.noteId}></CurrentNote>\n          )\n        })\n      }\n      </div>\n      </div>\n      \n    );\n  }\n  }\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}